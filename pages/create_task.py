import streamlit as st
import json
from utils.problem_generator import problem_generator

def show_create_task_page():
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ CSS —Ñ–∞–π–ª–∞
    def local_css(file_name):
        with open(file_name, "r", encoding="utf-8") as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

    local_css("styles/create_task.css")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
    if "input_count" not in st.session_state:
        st.session_state.input_count = 1
    if "output_count" not in st.session_state:
        st.session_state.output_count = 1

    # –ö–æ–ª–ª–±—ç–∫–∏
    def add_input_callback():
        st.session_state.input_count += 1

    def add_output_callback():
        st.session_state.output_count += 1

    def remove_input_callback():
        if st.session_state.input_count > 1:
            st.session_state.input_count -= 1

    def remove_output_callback():
        if st.session_state.output_count > 1:
            st.session_state.output_count -= 1

    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    st.markdown('<div class="create-task-container">', unsafe_allow_html=True)

    st.markdown('<h2>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</h2>', unsafe_allow_html=True)

    # --- –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ ---
    st.markdown('<h4>–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏</h4>', unsafe_allow_html=True)
    col1, col2 = st.columns([3, 1])
    with col1:
        st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", key="task_name")
    with col2:
        st.selectbox("–°–ª–æ–∂–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞", options=["Easy", "Medium", "Hard"], key="task_difficulty")

    # --- –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ---
    st.markdown('<h4>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</h4>', unsafe_allow_html=True)
    st.text_area("–ù–∞–ø–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Marcdown (.md)", height=150, key="task_description")

    st.markdown("---")

    # --- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ ---
    st.markdown('<h4>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞</h4>', unsafe_allow_html=True)
    st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏", key="function_name")

    st.text("")
    st.text("")

    # --- –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
    st.markdown('<h5>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h5>', unsafe_allow_html=True)
    input_types = ["int", "float", "string", "bool", "list<int>", "list<float>", "list<string>", "list<bool>"]

    for i in range(st.session_state.input_count):
        col_var, col_type = st.columns([2, 1])
        with col_var:
            st.text_input(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {i + 1} (–≤—Ö–æ–¥)", key=f"input_name_{i}")
        with col_type:
            st.selectbox(f"–¢–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {i + 1}", options=input_types, key=f"input_type_{i}")

    col_add_rem = st.columns(6)
    with col_add_rem[0]:
        st.button("–î–æ–±–∞–≤–∏—Ç—å", on_click=add_input_callback)
    with col_add_rem[1]:
        st.button("–£–¥–∞–ª–∏—Ç—å", on_click=remove_input_callback)

    # --- –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
    st.markdown('<h3>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h3>', unsafe_allow_html=True)
    for i in range(st.session_state.output_count):
        col_var, col_type = st.columns([2, 1])
        with col_var:
            st.text_input(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {i + 1} (–≤—ã—Ö–æ–¥)", key=f"output_name_{i}")
        with col_type:
            st.selectbox(f"–¢–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {i + 1}", options=input_types, key=f"output_type_{i}")

    col_add_rem_out = st.columns(6)
    with col_add_rem_out[0]:
        st.button("–î–æ–±–∞–≤–∏—Ç—å ", on_click=add_output_callback)
    with col_add_rem_out[1]:
        st.button("–£–¥–∞–ª–∏—Ç—å ", on_click=remove_output_callback)

    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π –∏ –≤—ã–≤–æ–¥–∏–º –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    if st.button("üí° –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", type="primary"):
        error_messages = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not st.session_state.get("task_name", "").strip():
            error_messages.append("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")
        if not st.session_state.get("task_description", "").strip():
            error_messages.append("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")
        if not st.session_state.get("function_name", "").strip():
            error_messages.append("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        for i in range(st.session_state.input_count):
            if not st.session_state.get(f"input_name_{i}", "").strip():
                error_messages.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤—Ö–æ–¥–∞ {i + 1} –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        for i in range(st.session_state.output_count):
            if not st.session_state.get(f"output_name_{i}", "").strip():
                error_messages.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤—ã—Ö–æ–¥–∞ {i + 1} –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –≤—ã–≤–æ–¥–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∏–Ω–∞—á–µ ‚Äì –≤—ã–≤–æ–¥–∏–º JSON
        if error_messages:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:\n" + "\n".join(error_messages))
        else:
            metadata = {
                "task_name": st.session_state.get("task_name", ""),
                "difficulty": st.session_state.get("task_difficulty", ""),
                "description": st.session_state.get("task_description", ""),
                "function_name": st.session_state.get("function_name", ""),
                "inputs": [],
                "outputs": []
            }

            for i in range(st.session_state.input_count):
                input_name = st.session_state.get(f"input_name_{i}", "")
                input_type = st.session_state.get(f"input_type_{i}", "")
                metadata["inputs"].append({"name": input_name, "type": input_type})

            for i in range(st.session_state.output_count):
                output_name = st.session_state.get(f"output_name_{i}", "")
                output_type = st.session_state.get(f"output_type_{i}", "")
                metadata["outputs"].append({"name": output_name, "type": output_type})

            # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JSON –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
            print(json.dumps(metadata, ensure_ascii=False, indent=4))
            st.success("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! üéâ")

            # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON-—Å—Ç—Ä–æ–∫—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∫–æ–¥–∞
            boilerplate_codes = problem_generator(metadata)

            # –í—ã–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–æ–Ω—Å–æ–ª—å
            print(json.dumps(boilerplate_codes, ensure_ascii=False, indent=4))

    st.markdown('</div>', unsafe_allow_html=True)
