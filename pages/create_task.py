import streamlit as st
import json
from utils.problem_generator import problem_generator

def show_create_task_page():
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ CSS —Ñ–∞–π–ª–∞
    def local_css(file_name):
        with open(file_name, "r", encoding="utf-8") as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏ —Å—Ç–∏–ª–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    local_css("styles/create_task.css")
    local_css("styles/description.css")  # –ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –æ–ø–∏—Å–∞–Ω–∏—è

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
    if "input_count" not in st.session_state:
        st.session_state.input_count = 1
    if "output_count" not in st.session_state:
        st.session_state.output_count = 1

    # –ö–æ–ª–ª–±—ç–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª–µ–π
    def add_input_callback():
        st.session_state.input_count += 1

    def add_output_callback():
        st.session_state.output_count += 1

    def remove_input_callback():
        if st.session_state.input_count > 1:
            st.session_state.input_count -= 1

    def remove_output_callback():
        if st.session_state.output_count > 1:
            st.session_state.output_count -= 1

    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    st.markdown('<div class="create-task-container">', unsafe_allow_html=True)
    st.markdown('<h2>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</h2>', unsafe_allow_html=True)

    # --- –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ ---
    st.markdown('<h4>–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏</h4>', unsafe_allow_html=True)
    col1, col2 = st.columns([3, 1])
    with col1:
        st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", key="task_name")
    with col2:
        st.selectbox("–°–ª–æ–∂–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞", options=["Easy", "Medium", "Hard"], key="task_difficulty")

    # --- –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ---
    st.markdown('<h4>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</h4>', unsafe_allow_html=True)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
    if "task_description" not in st.session_state:
        st.session_state["task_description"] = ""

    col_add_rem_out = st.columns(3)
    with col_add_rem_out[0]:
        st.button("‚ú® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Markdown", on_click=remove_output_callback)
    with col_add_rem_out[1]:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Markdown
        toggle_state = st.toggle("Markdown", key="markdown_toggle")

    if toggle_state:
        # –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º Markdown, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Å –∫–ª–∞—Å—Å–æ–º –¥–ª—è —Å—Ç–∏–ª–µ–π
        st.markdown(
            f'<div class="description-markdown-container">{'\n\n' + st.session_state["task_description"]}</div>',
            unsafe_allow_html=True
        )
    else:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤—ã–∫–ª—é—á–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        new_text = st.text_area(
            "–ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∏ –ø—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤ (–≤—Ö–æ–¥–Ω—ã–µ –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)",
            height=150,
            value=st.session_state["task_description"],
            key="task_description_edit"
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á
        st.session_state["task_description"] = new_text

    st.markdown("---")

    # --- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ ---
    st.markdown('<h4>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞</h4>', unsafe_allow_html=True)
    st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏", key="function_name")
    st.text("")
    st.text("")

    # --- –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
    st.markdown('<h5>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h5>', unsafe_allow_html=True)
    input_types = ["int", "float", "string", "bool", "list<int>", "list<float>", "list<string>", "list<bool>"]

    for i in range(st.session_state.input_count):
        col_var, col_type = st.columns([2, 1])
        with col_var:
            st.text_input(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {i + 1} (–≤—Ö–æ–¥)", key=f"input_name_{i}")
        with col_type:
            st.selectbox(f"–¢–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {i + 1}", options=input_types, key=f"input_type_{i}")

    col_add_rem = st.columns(6)
    with col_add_rem[0]:
        st.button("–î–æ–±–∞–≤–∏—Ç—å", on_click=add_input_callback)
    with col_add_rem[1]:
        st.button("–£–¥–∞–ª–∏—Ç—å", on_click=remove_input_callback)

    # --- –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
    st.markdown('<h3>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h3>', unsafe_allow_html=True)
    for i in range(st.session_state.output_count):
        col_var, col_type = st.columns([2, 1])
        with col_var:
            st.text_input(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {i + 1} (–≤—ã—Ö–æ–¥)", key=f"output_name_{i}")
        with col_type:
            st.selectbox(f"–¢–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {i + 1}", options=input_types, key=f"output_type_{i}")

    col_add_rem_out = st.columns(6)
    with col_add_rem_out[0]:
        st.button("–î–æ–±–∞–≤–∏—Ç—å ", on_click=add_output_callback)
    with col_add_rem_out[1]:
        st.button("–£–¥–∞–ª–∏—Ç—å ", on_click=remove_output_callback)

    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
    if st.button("üí° –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", type="primary"):
        error_messages = []
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not st.session_state.get("task_name", "").strip():
            error_messages.append("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")
        if not st.session_state.get("task_description", "").strip():
            error_messages.append("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")
        if not st.session_state.get("function_name", "").strip():
            error_messages.append("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        for i in range(st.session_state.input_count):
            if not st.session_state.get(f"input_name_{i}", "").strip():
                error_messages.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤—Ö–æ–¥–∞ {i + 1} –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        for i in range(st.session_state.output_count):
            if not st.session_state.get(f"output_name_{i}", "").strip():
                error_messages.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤—ã—Ö–æ–¥–∞ {i + 1} –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")

        if error_messages:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:\n" + "\n".join(error_messages))
        else:
            metadata = {
                "task_name": st.session_state.get("task_name", ""),
                "difficulty": st.session_state.get("task_difficulty", ""),
                "description": st.session_state.get("task_description", ""),
                "function_name": st.session_state.get("function_name", ""),
                "inputs": [],
                "outputs": []
            }
            for i in range(st.session_state.input_count):
                input_name = st.session_state.get(f"input_name_{i}", "")
                input_type = st.session_state.get(f"input_type_{i}", "")
                metadata["inputs"].append({"name": input_name, "type": input_type})
            for i in range(st.session_state.output_count):
                output_name = st.session_state.get(f"output_name_{i}", "")
                output_type = st.session_state.get(f"output_type_{i}", "")
                metadata["outputs"].append({"name": output_name, "type": output_type})

            print(json.dumps(metadata, ensure_ascii=False, indent=4))
            st.success("–®–∞–±–ª–æ–Ω–Ω—ã–µ –∫–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã! üéâ")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –≤ st.session_state
            st.session_state.boilerplate_dict = problem_generator(metadata)

    # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω—ã —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –∏ –±–ª–æ–∫–∏ —Å –∫–æ–¥–æ–º
    if "boilerplate_dict" in st.session_state:
        st.markdown("---")
        boilerplate_dict = st.session_state.boilerplate_dict

        # –ö–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞ –≤ session_state)
        lang_options = ["C++", "JavaScript", "Rust", "Java"]
        selected_lang = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–¥–∞", lang_options, key="selected_lang")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä language –¥–ª—è st.code
        if selected_lang == "C++":
            template_key = "cppTemplate"
            full_key = "fullCpp"
            code_lang = "cpp"
        elif selected_lang == "JavaScript":
            template_key = "jsTemplate"
            full_key = "fullJs"
            code_lang = "javascript"
        elif selected_lang == "Rust":
            template_key = "rustTemplate"
            full_key = "fullRust"
            code_lang = "rust"
        elif selected_lang == "Java":
            template_key = "javaTemplate"
            full_key = "fullJava"
            code_lang = "java"

        template_code = boilerplate_dict.get(template_key, "")
        full_code = boilerplate_dict.get(full_key, "")

        st.markdown("#### –®–∞–±–ª–æ–Ω–Ω—ã–π –∫–æ–¥:")
        st.code(template_code, language=code_lang)
        st.markdown("#### –ü–æ–ª–Ω—ã–π —à–∞–±–ª–æ–Ω–Ω—ã–π –∫–æ–¥:")
        st.code(full_code, language=code_lang)

    st.markdown('</div>', unsafe_allow_html=True)
